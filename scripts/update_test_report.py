#!/usr/bin/env python3
"""
Test Failure Report Generator for StirCraft

Runs Django tests and automatically updates docs/TEST_FAILURE_REPORT.md
with current test status and any failure details.
"""

import subprocess
import sys
import os
import re
from datetime import datetime
from pathlib import Path


def run_tests_and_capture_output():
    """Run Django tests and capture all output."""
    os.chdir('stircraft')
    
    # Set environment for PostgreSQL
    env = os.environ.copy()
    if 'DB_PASSWORD' not in env:
        env['DB_PASSWORD'] = 'stircraft123'
    
    # Run tests with maximum verbosity
    cmd = [
        sys.executable, 'manage.py', 'test', 'stir_craft', 
        '--verbosity=2', '--keepdb'
    ]
    
    try:
        result = subprocess.run(
            cmd, 
            capture_output=True, 
            text=True, 
            env=env,
            timeout=300  # 5 minute timeout
        )
        return result.returncode, result.stdout, result.stderr
    except subprocess.TimeoutExpired:
        return -1, "", "Tests timed out after 5 minutes"


def parse_test_output(stdout, stderr):
    """Parse test output to extract failure information."""
    combined_output = stdout + "\n" + stderr
    
    # Extract basic stats
    test_count_match = re.search(r'Ran (\d+) tests?', combined_output)
    total_tests = int(test_count_match.group(1)) if test_count_match else 0
    
    # Check if tests passed
    if "OK" in combined_output and total_tests > 0:
        return {
            'status': 'PASSING',
            'total_tests': total_tests,
            'failures': [],
            'errors': []
        }
    
    # Extract failures and errors
    failures = []
    errors = []
    
    # Parse FAIL entries
    fail_pattern = r'FAIL: (.*?)\n(.*?)(?=(?:FAIL:|ERROR:|=+)|\Z)'
    for match in re.finditer(fail_pattern, combined_output, re.DOTALL):
        test_name = match.group(1).strip()
        failure_details = match.group(2).strip()
        failures.append({
            'test': test_name,
            'details': failure_details
        })
    
    # Parse ERROR entries  
    error_pattern = r'ERROR: (.*?)\n(.*?)(?=(?:FAIL:|ERROR:|=+)|\Z)'
    for match in re.finditer(error_pattern, combined_output, re.DOTALL):
        test_name = match.group(1).strip()
        error_details = match.group(2).strip()
        errors.append({
            'test': test_name,
            'details': error_details
        })
    
    return {
        'status': 'FAILING',
        'total_tests': total_tests,
        'failures': failures,
        'errors': errors
    }


def generate_report(test_results):
    """Generate the test failure report content."""
    now = datetime.now().strftime("%B %d, %Y")
    
    if test_results['status'] == 'PASSING':
        return f"""# StirCraft Test Status Report

**Last Updated:** {now}  
**Status:** ✅ ALL TESTS PASSING  
**Total Tests:** {test_results['total_tests']}  
**Success Rate:** 100%  

## 🎉 Current Status

All tests are currently passing! The test infrastructure is stable.

## 🚀 Running Tests

**Quick command:**
```bash
DB_PASSWORD=stircraft123 python stircraft/manage.py test stir_craft
```

**Using the test runner:**
```bash
./run_tests.sh
```

See `docs/POSTGRES_SETUP.md` for setup instructions.

---

*This report was automatically generated by running `python scripts/update_test_report.py`*
"""
    
    # Calculate stats for failing tests
    failure_count = len(test_results['failures'])
    error_count = len(test_results['errors'])
    passing_count = test_results['total_tests'] - failure_count - error_count
    success_rate = (passing_count / test_results['total_tests'] * 100) if test_results['total_tests'] > 0 else 0
    
    report = f"""# StirCraft Test Failure Report

**Last Updated:** {now}  
**Status:** {passing_count} PASSING ✅ | {failure_count} FAILING ❌ | {error_count} ERROR ⚠️  
**Total Tests:** {test_results['total_tests']}  
**Success Rate:** {success_rate:.1f}%  

## ❌ Test Failures ({failure_count + error_count})

"""
    
    # Add failure details
    for i, failure in enumerate(test_results['failures'], 1):
        report += f"""### {i}. {failure['test']}
```
{failure['details']}
```

"""
    
    # Add error details
    for i, error in enumerate(test_results['errors'], len(test_results['failures']) + 1):
        report += f"""### {i}. {error['test']} (ERROR)
```
{error['details']}
```

"""
    
    report += """## 🚀 Running Tests

**Quick command:**
```bash
DB_PASSWORD=stircraft123 python stircraft/manage.py test stir_craft
```

**Verbose output:**
```bash
DB_PASSWORD=stircraft123 python stircraft/manage.py test stir_craft --verbosity=2
```

See `docs/POSTGRES_SETUP.md` for setup instructions.

---

*This report was automatically generated by running `python scripts/update_test_report.py`*
"""
    
    return report


def update_report_file(content):
    """Update the test failure report file."""
    # Go back to project root
    os.chdir('..')
    
    report_path = Path('docs/TEST_FAILURE_REPORT.md')
    with open(report_path, 'w') as f:
        f.write(content)
    
    print(f"✅ Updated {report_path}")


def main():
    """Main function to run tests and update report."""
    print("🧪 Running tests and generating report...")
    
    # Run tests
    return_code, stdout, stderr = run_tests_and_capture_output()
    
    # Parse results
    test_results = parse_test_output(stdout, stderr)
    
    # Generate and save report
    report_content = generate_report(test_results)
    update_report_file(report_content)
    
    # Print summary
    if test_results['status'] == 'PASSING':
        print(f"🎉 All {test_results['total_tests']} tests passing!")
    else:
        failure_count = len(test_results['failures'])
        error_count = len(test_results['errors'])
        print(f"⚠️  {failure_count} failures, {error_count} errors")
        print("📝 Test failure report updated with details")
    
    return return_code


if __name__ == '__main__':
    sys.exit(main())
