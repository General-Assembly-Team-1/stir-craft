# ================================
# STIR-CRAFT PROJECT .GITIGNORE
# ================================
# Comprehensive exclusion file for Django + JavaScript + Docker project
# Updated: August 23, 2025

# ================================
# PROJECT-SPECIFIC EXCLUSIONS
# ================================

# Personal development scripts - avoid conflicts with team members' local utilities
update_branches.sh

# Debug utilities - temporary files for troubleshooting specific issues
debug_formset.py

# ================================
# SECURITY & SENSITIVE DATA
# ================================

# Environment files - contain sensitive configuration and secrets
.env
.env.local
.env.*.local
.envrc
*.env
# KEEP: .env.example files - these show the required structure without sensitive values
!.env.example
!.env.prod.example
!.env.test

# SSH keys and certificates - never commit authentication credentials
*.pem
*.key
*.crt
*.cert
id_rsa*
id_dsa*
id_ecdsa*
id_ed25519*

# Database dumps - may contain sensitive user data
*.sql
*.dump
*.dmp

# ================================
# PYTHON RUNTIME & COMPILATION
# ================================

# Byte-compiled / optimized / DLL files - generated at runtime, not source code
__pycache__/
*.py[codz]
*$py.class

# C extensions - compiled binaries specific to local machine architecture
*.so

# ================================
# PYTHON PACKAGE MANAGEMENT
# ================================

# ================================
# PYTHON PACKAGE MANAGEMENT
# ================================

# Distribution / packaging - build artifacts that can be regenerated
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller - executable building tool artifacts
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs - package installation debug information
pip-log.txt
pip-delete-this-directory.txt

# ================================
# TESTING & COVERAGE
# ================================

# Unit test / coverage reports - generated by pytest, coverage.py, etc.
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/
test-results/
.nyc_output/

# ================================
# DJANGO FRAMEWORK
# ================================

# Django stuff - runtime files and sensitive settings
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Static files collected by Django - regenerated by collectstatic command
# KEEP: staticfiles/ source directory with custom CSS/JS
# EXCLUDE: collected static files in production
staticfiles/admin/
staticfiles/rest_framework/
staticfiles/CACHE/

# Django media uploads - user-uploaded content (configure separate backup)
# Exclude all media files from version control - these should be handled by cloud storage in production
# TEMPORARY: Allow media files for production deployment (move to S3/Cloudinary later)
# media/

# Django migrations - KEEP these as they track database schema changes
# migrations/ are intentionally NOT ignored

# ================================
# NODEJS & FRONTEND
# ================================

# Node.js dependencies - huge folder, regenerated by npm/yarn install
node_modules/

# npm/yarn lock files - KEEP package-lock.json for reproducible builds
# package-lock.json is kept for dependency version consistency

# Frontend build artifacts - generated by webpack, vite, etc.
dist/
build/
.next/
.nuxt/
.vuepress/dist/

# Frontend coverage and test reports
coverage/
.nyc_output/

# ================================
# DOCKER & CONTAINERIZATION
# ================================

# Docker volumes and data - persistent storage handled separately
docker-data/
postgres-data/
redis-data/

# Docker Compose override files - local development customizations
docker-compose.override.yml
docker-compose.local.yml

# ================================
# DEVELOPMENT TOOLS & IDEs
# ================================

# ================================
# DEVELOPMENT TOOLS & IDEs
# ================================

# Visual Studio Code - workspace settings and extensions
.vscode/settings.json
.vscode/launch.json
.vscode/tasks.json
.vscode/.ropeproject
# KEEP: .vscode/extensions.json for team consistency
!.vscode/extensions.json

# PyCharm / IntelliJ IDEA - project-specific IDE configuration
.idea/
*.iws
*.iml
*.ipr

# Sublime Text - project files and workspace state
*.sublime-project
*.sublime-workspace

# Vim/Neovim - editor swap and backup files
*.swp
*.swo
*~
.netrwhist

# Emacs - editor backup and auto-save files
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# ================================
# LANGUAGE-SPECIFIC TOOLS
# ================================

# Translations - compiled translation files (source .po files are kept)
*.mo
*.pot

# Flask stuff - if mixing Flask components
instance/
.webassets-cache

# Scrapy stuff - web scraping framework artifacts
.scrapy

# Sphinx documentation - generated docs (source docs/ are kept)
docs/_build/
_build/
.doctrees/

# PyBuilder - build tool artifacts
.pybuilder/
target/

# Jupyter Notebook - checkpoint files and kernel data
.ipynb_checkpoints

# IPython - interactive Python shell configuration
profile_default/
ipython_config.py

# ================================
# PYTHON VERSION MANAGEMENT
# ================================

# pyenv - Python version specification
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv - dependency management (KEEP Pipfile.lock for reproducible builds)
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV - modern Python package installer
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry - Python dependency management
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm - Python dependency management
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi - conda-based package management
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582 - local packages directory used by modern package managers
__pypackages__/

# ================================
# VIRTUAL ENVIRONMENTS
# ================================

# Virtual environments - isolated Python environments (recreated from requirements)
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# ================================
# BACKGROUND SERVICES
# ================================

# Celery stuff - distributed task queue artifacts
celerybeat-schedule
celerybeat.pid

# Redis dumps - in-memory database snapshots
dump.rdb

# ================================
# TEMPORARY & CACHE FILES
# ================================

# SageMath parsed files - mathematical software artifacts
*.sage.py

# macOS system files - filesystem metadata
.DS_Store
.AppleDouble
.LSOverride
Icon?
._*

# Windows system files - filesystem metadata
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/

# Linux temporary files
*~
.fuse_hidden*
.directory
.Trash-*

# ================================
# MODERN DEVELOPMENT TOOLS
# ================================

# Spyder project settings - Python IDE configuration
.spyderproject
.spyproject

# Rope project settings - Python refactoring library
.ropeproject

# mkdocs documentation - static site generator output
/site

# mypy - static type checker cache
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker - Facebook's Python type checker
.pyre/

# pytype static type analyzer - Google's Python type checker
.pytype/

# Cython debug symbols - compiled Python extension debugging
cython_debug/

# Ruff - modern Python linter and formatter cache
.ruff_cache/

# PyPI configuration file - package publishing credentials
.pypirc

# ================================
# AI-POWERED DEVELOPMENT TOOLS
# ================================

# Cursor - AI-powered code editor exclusions
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Abstra - AI-powered process automation framework
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Marimo - reactive Python notebook environment
marimo/_static/
marimo/_lsp/
__marimo__/

# ================================
# DEPLOYMENT & PRODUCTION
# ================================

# Heroku - platform-specific files
.heroku/

# AWS - cloud deployment artifacts
.aws/
.elasticbeanstalk/

# Google Cloud - deployment configuration
.gcloud/

# Vercel - frontend deployment configuration
.vercel

# Netlify - static site deployment
.netlify

# ================================
# BACKUP & TEMPORARY FILES
# ================================

# Backup files - created by editors and tools
*.bak
*.backup
*.orig
*.tmp

# Log files - application and system logs
*.log
logs/

# Crash dumps - application crash reports
*.crash
*.stackdump

# ================================
# WHY CERTAIN FILES ARE KEPT
# ================================

# KEPT FILES AND REASONING:
#
# Pipfile & Pipfile.lock - Ensures all developers use same dependency versions
# package.json & package-lock.json - Frontend dependency consistency
# requirements.txt - Python dependency specification for production
# .env.example - Shows required environment variables without secrets
# staticfiles/css/ & staticfiles/js/ - Custom stylesheets and JavaScript
# migrations/ - Database schema evolution history (CRITICAL for Django)
# templates/ - Django HTML templates (core application files)
# .vscode/extensions.json - Ensures team uses same VS Code extensions
# Dockerfile & docker-compose.yml - Container configuration for deployment
# .github/ - CI/CD workflows and repository automation
# docs/ - Project documentation (recently cleaned and organized)
#
# WHY THESE ARE EXCLUDED:
#
# __pycache__/ - Regenerated automatically by Python interpreter
# node_modules/ - Huge folder, recreated by npm install
# .env - Contains secrets and local configuration
# *.log - Can grow large and contain sensitive information
# .vscode/settings.json - Personal developer preferences
# .coverage - Test coverage reports, regenerated by test runs
# build/ & dist/ - Compiled artifacts, regenerated by build process
