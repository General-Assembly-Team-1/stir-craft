# Generated by Django 5.2.5 on 2025-08-12 14:30

import django.core.validators
import django.db.models.deletion
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Vessel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the vessel (e.g., 'Martini Glass', 'Old Fashioned Glass')", max_length=100)),
                ('volume', models.DecimalField(decimal_places=2, help_text="Typical capacity of the vessel in milliliters (e.g., '240.00')", max_digits=10)),
                ('material', models.CharField(help_text="Material the vessel is made from (e.g., 'Glass', 'Crystal', 'Copper')", max_length=100)),
                ('stemmed', models.BooleanField(default=False, help_text='Whether the vessel has a stem (affects temperature retention)')),
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='When this vessel was added to the database')),
            ],
            options={
                'verbose_name': 'Vessel',
                'verbose_name_plural': 'Vessels',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Cocktail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the cocktail (e.g., 'Margarita')", max_length=200)),
                ('description', models.TextField(blank=True, help_text='Optional detailed description of the cocktail')),
                ('instructions', models.TextField(help_text='Step-by-step preparation instructions')),
                ('is_alcoholic', models.BooleanField(default=True, help_text='Indicates whether the cocktail contains alcohol')),
                ('color', models.CharField(blank=True, help_text="Cocktail color for filtering (e.g., 'Red', 'Yellow')", max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the cocktail was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the cocktail was last updated')),
                ('creator', models.ForeignKey(help_text='User who created this cocktail', on_delete=django.db.models.deletion.CASCADE, related_name='created_cocktails', to=settings.AUTH_USER_MODEL)),
                ('vibe_tags', taggit.managers.TaggableManager(blank=True, help_text='Tags for vibes like tropical, cozy, party, etc.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the ingredient (e.g., 'London Dry Gin')", max_length=100, unique=True)),
                ('ingredient_type', models.CharField(choices=[('spirit', 'Spirit'), ('liqueur', 'Liqueur'), ('mixer', 'Mixer'), ('syrup', 'Syrup'), ('bitters', 'Bitters'), ('juice', 'Juice'), ('garnish', 'Garnish'), ('other', 'Other')], help_text='Category of ingredient for filtering and organization', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Optional detailed description of the ingredient, brand notes, or usage tips')),
                ('alcohol_content', models.FloatField(default=0.0, help_text='Alcohol by volume (ABV) percentage - 0 for non-alcoholic ingredients', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this ingredient was first added to the database')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this ingredient was last modified')),
                ('flavor_tags', taggit.managers.TaggableManager(blank=True, help_text='Flavor notes like citrusy, smoky, sweet, herbal, etc. Used for recipe recommendations', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Ingredient',
                'verbose_name_plural': 'Ingredients',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('birthdate', models.DateField(blank=True, help_text='Enter your birthdate (must be 21 or older)', null=True)),
                ('location', models.CharField(blank=True, help_text='Enter your zip code', max_length=10)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RecipeComponent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text="Amount of ingredient (e.g., '30.00')", max_digits=5)),
                ('unit', models.CharField(choices=[('oz', 'Ounces'), ('ml', 'Milliliters'), ('tsp', 'Teaspoon'), ('tbsp', 'Tablespoon'), ('dash', 'Dash'), ('splash', 'Splash'), ('pinch', 'Pinch'), ('piece', 'Piece'), ('slice', 'Slice'), ('wedge', 'Wedge'), ('sprig', 'Sprig')], help_text="Unit of measurement (e.g., 'ml', 'oz')", max_length=20)),
                ('preparation_note', models.CharField(blank=True, help_text="Optional preparation notes (e.g., 'muddled', 'expressed')", max_length=200)),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of addition (0 = first)')),
                ('cocktail', models.ForeignKey(help_text='Cocktail this ingredient belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='components', to='stir_craft.cocktail')),
                ('ingredient', models.ForeignKey(help_text='Ingredient used in the cocktail', on_delete=django.db.models.deletion.CASCADE, to='stir_craft.ingredient')),
            ],
            options={
                'ordering': ['order', 'ingredient__name'],
                'unique_together': {('cocktail', 'ingredient')},
            },
        ),
        migrations.AddField(
            model_name='cocktail',
            name='ingredients',
            field=models.ManyToManyField(help_text='Ingredients used in the cocktail', through='stir_craft.RecipeComponent', to='stir_craft.ingredient'),
        ),
        migrations.AddField(
            model_name='cocktail',
            name='vessel',
            field=models.ForeignKey(blank=True, help_text='Glassware or serving vessel for the cocktail', null=True, on_delete=django.db.models.deletion.SET_NULL, to='stir_craft.vessel'),
        ),
        migrations.CreateModel(
            name='List',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cocktails', models.ManyToManyField(blank=True, related_name='in_lists', to='stir_craft.cocktail')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_lists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
                'unique_together': {('name', 'creator')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='cocktail',
            unique_together={('name', 'creator')},
        ),
    ]
